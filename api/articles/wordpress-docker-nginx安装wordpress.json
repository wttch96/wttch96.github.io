{"title":"wordpress+docker+nginx安装wordpress","uid":"9cc0e1afa72b6df8eaf80b1eb99225e3","slug":"wordpress-docker-nginx安装wordpress","date":"2022-03-31T02:18:49.000Z","updated":"2022-05-13T15:59:53.307Z","comments":true,"path":"api/articles/wordpress-docker-nginx安装wordpress.json","keywords":null,"cover":null,"content":"<p>之前使用nginx + wordpress搭建过wordpress博客，但是整个过程过于复杂和繁琐，最近开发项目中使用到了docker和docker-compose感觉到项目自动部署和配置的便捷，这次我们选用 docker 和 wordpress 来进行 wordpress 的部署。nginx 作为外围网关，当然你也可以将 nginx 放入 docker 中。</p>\n<h1 id=\"1-docker-和-docker-compose-安装\"><a href=\"#1-docker-和-docker-compose-安装\" class=\"headerlink\" title=\"1. docker 和 docker-compose 安装\"></a>1. docker 和 docker-compose 安装</h1><p>首先我们准备好 docker 和 docker-compose，docker 直接使用官方的安装脚本进行安装。安装命令如下：<code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p>\n<p>你也可以使用国内一键安装的脚本：<code>curl -sSL https://get.daoclound.io/docker | sh</code></p>\n<p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href=\"https://github.com/docker/compose/releases%E3%80%82\">https://github.com/docker/compose/releases。</a></p>\n<p>运行以下命令以下载 Docker Compose 的当前稳定版本：<code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></p>\n<p>要安装其他版本的 Compose，请替换 1.24.1。</p>\n<p>将可执行权限应用于二进制文件：<code>sudo chmod +x /usr/local/bin/docker-compose</code></p>\n<p>创建软链：<code>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></p>\n<h1 id=\"2-docker-compose-yml-文件的编写\"><a href=\"#2-docker-compose-yml-文件的编写\" class=\"headerlink\" title=\"2. docker-compose.yml 文件的编写\"></a>2. docker-compose.yml 文件的编写</h1><p>在 docker 中启动 mysql 和 wordpress 两个容器，将 mysql 和 wordpress 的数据挂载在宿主机中方便将来做数据的迁移。具体的配置文件如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysql-wordpress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">8.0</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> wordpress<span class=\"token punctuation\">-</span>mysql\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># mysql 文件夹挂载</span>\n      <span class=\"token punctuation\">-</span> ./data/mysql<span class=\"token punctuation\">-</span>wordpress<span class=\"token punctuation\">:</span>/var/lib/mysql\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 默认密码配置，后面 wordpress 容器要使用到</span>\n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> wordpress\n      <span class=\"token key atrule\">MYSQL_DATABASE</span><span class=\"token punctuation\">:</span> wordpress\n      <span class=\"token key atrule\">MYSQL_USER</span><span class=\"token punctuation\">:</span> wordpress\n      <span class=\"token key atrule\">MYSQL_PASSWORD</span><span class=\"token punctuation\">:</span> wordpress\n\n  <span class=\"token key atrule\">wordpress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> mysql<span class=\"token punctuation\">-</span>wordpress\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wordpress<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> wordpress\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n       <span class=\"token comment\"># wordpress 文件挂载</span>\n       <span class=\"token punctuation\">-</span> ./data/wordpres<span class=\"token punctuation\">:</span>/var/www/html\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:80\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># wordpress 数据库连接</span>\n      <span class=\"token key atrule\">WORDPRESS_DB_HOST</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>wordpress<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>\n      <span class=\"token key atrule\">WORDPRESS_DB_USER</span><span class=\"token punctuation\">:</span> wordpress\n      <span class=\"token key atrule\">WORDPRESS_DB_PASSWORD</span><span class=\"token punctuation\">:</span> wordprses\n      <span class=\"token key atrule\">WORDPRESS_DB_NAME</span><span class=\"token punctuation\">:</span> wordpress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"3-宿主机-nginx-配置\"><a href=\"#3-宿主机-nginx-配置\" class=\"headerlink\" title=\"3. 宿主机 nginx 配置\"></a>3. 宿主机 nginx 配置</h1><p>首先将 nginx 配置使用 http 访问 wordpress，将 wordpress 初始化。</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">upstream</span> wordpress</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token directive\"><span class=\"token keyword\">server</span> localhost:8000</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token directive\"><span class=\"token keyword\">server_name</span> blog.wttch.com</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://wordpress</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_redirect</span> <span class=\"token boolean\">off</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Real-IP <span class=\"token variable\">$remote_addr</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-Host <span class=\"token variable\">$host</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-Server <span class=\"token variable\">$host</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-Proto <span class=\"token variable\">$scheme</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 转发host信息</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时就可以通过 <a href=\"http://blog.wttch.com/\">http://blog.wttch.com</a> 访问 wordpress 了。</p>\n<h1 id=\"附加-配置-https\"><a href=\"#附加-配置-https\" class=\"headerlink\" title=\"附加. 配置 https\"></a>附加. 配置 https</h1><p>通过 <a href=\"https://github.com/acmesh-official/acme.sh\">https://github.com/acmesh-official/acme.sh</a> 你可以配置 https 证书的自动配置，然后将生成的证书配置到 nginx 中。在此之前要记得将 wordpress 的 site_url 和 home 连接修改为 https，不然后面会出现 mixed content 错误。</p>\n<p>nginx https 的具体配置如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">upstream wordpress &#123;\n  server localhost:8000;\n&#125;\n\nserver &#123;\n  listen 80;\n  server_name blog.wttch.com;\n\n  rewrite ^&#x2F;(.*?)$ https:&#x2F;&#x2F;blog.wttch.com&#x2F;$1 permanent;\n&#125;\n\nserver &#123;\n  listen 443 ssl;\n  server_name blog.wttch.com;\n\n  location &#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;wordpress;\n    proxy_redirect off;\n\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Host $host;\n    proxy_set_header X-Forwarded-Server $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    # 转发host信息\n    proxy_set_header Host $host;\n  &#125;\n  # ssl证书地址\n  ssl_certificate     &#x2F;etc&#x2F;nginx&#x2F;https&#x2F;cert.pem;  # pem文件的路径\n  ssl_certificate_key  &#x2F;etc&#x2F;nginx&#x2F;https&#x2F;key.pem;  # key文件的路径\n\n  # ssl验证相关配置\n  ssl_session_timeout  5m;    #缓存有效期\n  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议\n  ssl_prefer_server_ciphers on;   #使用服务器端的首选算法\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"之前使用nginx + wordpress搭建过wordpress博客，但是整个过程过于复杂和繁琐，最近开发项目中使用到了docker和docker-compose感觉到项目自动部署和配置的便捷，这次我们选用 docker 和 wordpress 来进行 wordpress 的部...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-docker-%E5%92%8C-docker-compose-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1. docker 和 docker-compose 安装</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-docker-compose-yml-%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E5%86%99\"><span class=\"toc-text\">2. docker-compose.yml 文件的编写</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%AE%BF%E4%B8%BB%E6%9C%BA-nginx-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3. 宿主机 nginx 配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%8A%A0-%E9%85%8D%E7%BD%AE-https\"><span class=\"toc-text\">附加. 配置 https</span></a></li></ol>","author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"kotlin高阶函数","uid":"245d80e5558082de7c26fdd85370c466","slug":"java/kotlin/kotlin高阶函数","date":"2022-03-31T02:22:22.000Z","updated":"2022-05-13T15:59:53.304Z","comments":true,"path":"api/articles/java/kotlin/kotlin高阶函数.json","keywords":null,"cover":[],"text":" 高阶函数 run, with, apply, also, let, takeIf, takeUnless, repeat 高阶函数 T.() -&gt; R 和 (T) -&gt; R在泛型中经常会出现T.() -&gt; R和(T) -&gt; R类型的回调函数, 他们的区别...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"kotlin","slug":"kotlin","count":1,"path":"api/tags/kotlin.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"java范型运行时类型获取","uid":"693d61e4ffefde59b7a2ab0d6ba29929","slug":"java/java范型运行时类型获取","date":"2022-03-29T09:02:16.000Z","updated":"2022-05-13T15:59:53.302Z","comments":true,"path":"api/articles/java/java范型运行时类型获取.json","keywords":null,"cover":null,"text":"反射是我喜欢喜欢 java 的一个重要原因，它在保证静态语言特性的同时，为你提供了一些动态的特性，你可以通过反射做一些很令人惊奇的事情。本文将通过反射和继承来让你获取泛型的运行时类型。 java 泛型使用的是 type erasure。它的泛型代码只有一份，泛型实现需要在编译和运...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"},{"name":"反射","slug":"反射","count":1,"path":"api/tags/反射.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}