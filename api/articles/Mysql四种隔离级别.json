{"title":"Mysql四种隔离级别","uid":"63d2f7b33d78f0291d5339de6a110a5c","slug":"Mysql四种隔离级别","date":"2022-03-31T06:15:50.000Z","updated":"2022-05-13T15:59:53.301Z","comments":true,"path":"api/articles/Mysql四种隔离级别.json","keywords":null,"cover":null,"content":"<h1 id=\"一、事务的基本要素（ACID）\"><a href=\"#一、事务的基本要素（ACID）\" class=\"headerlink\" title=\"一、事务的基本要素（ACID）\"></a>一、事务的基本要素（ACID）</h1><ol>\n<li><strong>原子性（Atomicity）</strong>：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</li>\n<li><strong>一致性（Consistency）</strong>：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</li>\n<li><strong>隔离性（Isolation）</strong>：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</li>\n<li><strong>持久性（Durability）</strong>：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li>\n</ol>\n<h1 id=\"二、事务的并发问题\"><a href=\"#二、事务的并发问题\" class=\"headerlink\" title=\"二、事务的并发问题\"></a>二、事务的并发问题</h1><ol>\n<li><strong>脏读：</strong> 事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据。</li>\n<li><strong>不可重复读：</strong> 事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li>\n<li><strong>幻读：</strong> 系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li>\n</ol>\n<ul>\n<li><strong>小结：</strong> 不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</li>\n</ul>\n<h1 id=\"三、Mysql-的事务隔离级别\"><a href=\"#三、Mysql-的事务隔离级别\" class=\"headerlink\" title=\"三、Mysql 的事务隔离级别\"></a>三、Mysql 的事务隔离级别</h1><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交（read-uncommitted）</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>不可重复读（read-committed）</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>可重复读（repeatable-read）</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>串行化（serializable）</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<p><strong>补充：</strong></p>\n<ul>\n<li>事务隔离级别为读提交时，写数据只会锁住相应的行。</li>\n<li>事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的，这样可以防止幻读。</li>\n<li>事务隔离级别为串行化时，读写数据都会锁住整张表。</li>\n<li>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</li>\n<li>MYSQL MVCC实现机制参考链接：<a href=\"https://blog.csdn.net/whoamiyang/article/details/51901888\">https://blog.csdn.net/whoamiyang/article/details/51901888</a> 。</li>\n<li>关于next-key 锁可以参考链接：<a href=\"https://blog.csdn.net/bigtree_3721/article/details/73731377\">https://blog.csdn.net/bigtree_3721/article/details/73731377</a> 。</li>\n</ul>\n","text":"一、事务的基本要素（ACID） 原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"mysql","slug":"mysql","count":2,"path":"api/tags/mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%B4%A0%EF%BC%88ACID%EF%BC%89\"><span class=\"toc-text\">一、事务的基本要素（ACID）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">二、事务的并发问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Mysql-%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">三、Mysql 的事务隔离级别</span></a></li></ol>","author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"gradle小记","uid":"406fe1c4291c9a9fa691dc5fa45f97fd","slug":"构建工具/gradle小记","date":"2022-03-31T06:26:13.000Z","updated":"2022-05-13T15:59:53.307Z","comments":true,"path":"api/articles/构建工具/gradle小记.json","keywords":null,"cover":null,"text":"环境变量要想通过 System.getProperties()或者环境变量在 gradle 中获取相关的值，需要在指定环境变量的时候在环境变量的key前加上前缀。 通过 System.getProperties() 获取需要添加前缀 org.gradle.project.;通过环...","link":"","photos":[],"count_time":{"symbolsCount":172,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"gradle","slug":"gradle","count":1,"path":"api/tags/gradle.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"kotlin高阶函数","uid":"245d80e5558082de7c26fdd85370c466","slug":"java/kotlin/kotlin高阶函数","date":"2022-03-31T02:22:22.000Z","updated":"2022-05-13T15:59:53.304Z","comments":true,"path":"api/articles/java/kotlin/kotlin高阶函数.json","keywords":null,"cover":[],"text":" 高阶函数 run, with, apply, also, let, takeIf, takeUnless, repeat 高阶函数 T.() -&gt; R 和 (T) -&gt; R在泛型中经常会出现T.() -&gt; R和(T) -&gt; R类型的回调函数, 他们的区别...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"kotlin","slug":"kotlin","count":1,"path":"api/tags/kotlin.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}