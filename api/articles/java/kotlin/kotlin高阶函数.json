{"title":"kotlin高阶函数","uid":"245d80e5558082de7c26fdd85370c466","slug":"java/kotlin/kotlin高阶函数","date":"2022-03-31T02:22:22.000Z","updated":"2022-05-13T15:59:53.304Z","comments":true,"path":"api/articles/java/kotlin/kotlin高阶函数.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>高阶函数 run, with, apply, also, let, takeIf, takeUnless, repeat</p></blockquote>\n<h2 id=\"高阶函数-T-gt-R-和-T-gt-R\"><a href=\"#高阶函数-T-gt-R-和-T-gt-R\" class=\"headerlink\" title=\"高阶函数 T.() -&gt; R 和 (T) -&gt; R\"></a>高阶函数 T.() -&gt; R 和 (T) -&gt; R</h2><p>在泛型中经常会出现<code>T.() -&gt; R</code>和<code>(T) -&gt; R</code>类型的回调函数, 他们的区别在于: <code>T.() -&gt; R</code></p>\n<p>可以在回调函数中使用<code>this</code>来指代回调函数的传参<code>T</code>, 而<code>(T) -&gt; R</code>使用的是 <code>it</code>来指代.</p>\n<p>具体调用如下</p>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T.()\"></a>T.()</h3><img src=\"/post/java/kotlin/kotlin%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/T.().png\" class=\"\">\n\n<h3 id=\"T-it\"><a href=\"#T-it\" class=\"headerlink\" title=\"(T) it\"></a>(T) it</h3><img src=\"/post/java/kotlin/kotlin%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/T-it.png\" class=\"\">\n\n<h3 id=\"T-this\"><a href=\"#T-this\" class=\"headerlink\" title=\"(T) this\"></a>(T) this</h3><img src=\"/post/java/kotlin/kotlin%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/T-this.png\" class=\"\">\n\n<h2 id=\"run-执行回调函数并返回执行结果\"><a href=\"#run-执行回调函数并返回执行结果\" class=\"headerlink\" title=\"run 执行回调函数并返回执行结果\"></a><code>run</code> 执行回调函数并返回执行结果</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"with-传入对象并返回对象指定函数的执行结果\"><a href=\"#with-传入对象并返回对象指定函数的执行结果\" class=\"headerlink\" title=\"with 传入对象并返回对象指定函数的执行结果\"></a><code>with</code> 传入对象并返回对象指定函数的执行结果</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>receiver<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> receiver<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"apply-执行回调函数并返回对象自身\"><a href=\"#apply-执行回调函数并返回对象自身\" class=\"headerlink\" title=\"apply 执行回调函数并返回对象自身\"></a><code>apply</code> 执行回调函数并返回对象自身</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"also-将自身对象传入回调函数执行并返回自身对象\"><a href=\"#also-将自身对象传入回调函数执行并返回自身对象\" class=\"headerlink\" title=\"also 将自身对象传入回调函数执行并返回自身对象\"></a><code>also</code> 将自身对象传入回调函数执行并返回自身对象</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1.1\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"let-将自身对象传入回调函数执行并返回执行结果\"><a href=\"#let-将自身对象传入回调函数执行并返回执行结果\" class=\"headerlink\" title=\"let 将自身对象传入回调函数执行并返回执行结果\"></a><code>let</code> 将自身对象传入回调函数执行并返回执行结果</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">let</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"takeIf-如果将自身对象执行断言方法-如果断言为真返回自身否则返回-null\"><a href=\"#takeIf-如果将自身对象执行断言方法-如果断言为真返回自身否则返回-null\" class=\"headerlink\" title=\"takeIf 如果将自身对象执行断言方法, 如果断言为真返回自身否则返回 null\"></a><code>takeIf</code> 如果将自身对象执行断言方法, 如果断言为真返回自身否则返回 null</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1.1\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">takeIf</span><span class=\"token punctuation\">(</span>predicate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"takeUnless-如果将自身对象执行断言方法-如果断言为假返回自身否则返回-null\"><a href=\"#takeUnless-如果将自身对象执行断言方法-如果断言为假返回自身否则返回-null\" class=\"headerlink\" title=\"takeUnless 如果将自身对象执行断言方法, 如果断言为假返回自身否则返回 null\"></a><code>takeUnless</code> 如果将自身对象执行断言方法, 如果断言为假返回自身否则返回 null</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1.1\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">takeUnless</span><span class=\"token punctuation\">(</span>predicate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"repeat-执行指定次数的回调函数\"><a href=\"#repeat-执行指定次数的回调函数\" class=\"headerlink\" title=\"repeat 执行指定次数的回调函数\"></a><code>repeat</code> 执行指定次数的回调函数</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>times<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    contract <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until times<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":" 高阶函数 run, with, apply, also, let, takeIf, takeUnless, repeat 高阶函数 T.() -&gt; R 和 (T) -&gt; R在泛型中经常会出现T.() -&gt; R和(T) -&gt; R类型的回调函数, 他们的区别...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"kotlin","slug":"kotlin","count":1,"path":"api/tags/kotlin.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-T-gt-R-%E5%92%8C-T-gt-R\"><span class=\"toc-text\">高阶函数 T.() -&gt; R 和 (T) -&gt; R</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#T\"><span class=\"toc-text\">T.()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#T-it\"><span class=\"toc-text\">(T) it</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#T-this\"><span class=\"toc-text\">(T) this</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#run-%E6%89%A7%E8%A1%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">run 执行回调函数并返回执行结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#with-%E4%BC%A0%E5%85%A5%E5%AF%B9%E8%B1%A1%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E6%8C%87%E5%AE%9A%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">with 传入对象并返回对象指定函数的执行结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#apply-%E6%89%A7%E8%A1%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB\"><span class=\"toc-text\">apply 执行回调函数并返回对象自身</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#also-%E5%B0%86%E8%87%AA%E8%BA%AB%E5%AF%B9%E8%B1%A1%E4%BC%A0%E5%85%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%87%AA%E8%BA%AB%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">also 将自身对象传入回调函数执行并返回自身对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#let-%E5%B0%86%E8%87%AA%E8%BA%AB%E5%AF%B9%E8%B1%A1%E4%BC%A0%E5%85%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">let 将自身对象传入回调函数执行并返回执行结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#takeIf-%E5%A6%82%E6%9E%9C%E5%B0%86%E8%87%AA%E8%BA%AB%E5%AF%B9%E8%B1%A1%E6%89%A7%E8%A1%8C%E6%96%AD%E8%A8%80%E6%96%B9%E6%B3%95-%E5%A6%82%E6%9E%9C%E6%96%AD%E8%A8%80%E4%B8%BA%E7%9C%9F%E8%BF%94%E5%9B%9E%E8%87%AA%E8%BA%AB%E5%90%A6%E5%88%99%E8%BF%94%E5%9B%9E-null\"><span class=\"toc-text\">takeIf 如果将自身对象执行断言方法, 如果断言为真返回自身否则返回 null</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#takeUnless-%E5%A6%82%E6%9E%9C%E5%B0%86%E8%87%AA%E8%BA%AB%E5%AF%B9%E8%B1%A1%E6%89%A7%E8%A1%8C%E6%96%AD%E8%A8%80%E6%96%B9%E6%B3%95-%E5%A6%82%E6%9E%9C%E6%96%AD%E8%A8%80%E4%B8%BA%E5%81%87%E8%BF%94%E5%9B%9E%E8%87%AA%E8%BA%AB%E5%90%A6%E5%88%99%E8%BF%94%E5%9B%9E-null\"><span class=\"toc-text\">takeUnless 如果将自身对象执行断言方法, 如果断言为假返回自身否则返回 null</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#repeat-%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%AC%A1%E6%95%B0%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">repeat 执行指定次数的回调函数</span></a></li></ol>","author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mysql四种隔离级别","uid":"63d2f7b33d78f0291d5339de6a110a5c","slug":"Mysql四种隔离级别","date":"2022-03-31T06:15:50.000Z","updated":"2022-05-13T15:59:53.301Z","comments":true,"path":"api/articles/Mysql四种隔离级别.json","keywords":null,"cover":null,"text":"一、事务的基本要素（ACID） 原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"mysql","slug":"mysql","count":2,"path":"api/tags/mysql.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"wordpress+docker+nginx安装wordpress","uid":"9cc0e1afa72b6df8eaf80b1eb99225e3","slug":"wordpress-docker-nginx安装wordpress","date":"2022-03-31T02:18:49.000Z","updated":"2022-05-13T15:59:53.307Z","comments":true,"path":"api/articles/wordpress-docker-nginx安装wordpress.json","keywords":null,"cover":null,"text":"之前使用nginx + wordpress搭建过wordpress博客，但是整个过程过于复杂和繁琐，最近开发项目中使用到了docker和docker-compose感觉到项目自动部署和配置的便捷，这次我们选用 docker 和 wordpress 来进行 wordpress 的部...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}