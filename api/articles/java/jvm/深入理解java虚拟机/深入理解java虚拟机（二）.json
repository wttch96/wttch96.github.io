{"title":"深入理解java虚拟机（二）","uid":"91e0a4a93e4ee6f9ef1f4f9607c79a1f","slug":"java/jvm/深入理解java虚拟机/深入理解java虚拟机（二）","date":"2022-05-13T13:09:44.000Z","updated":"2022-05-14T12:22:12.798Z","comments":true,"path":"api/articles/java/jvm/深入理解java虚拟机/深入理解java虚拟机（二）.json","keywords":null,"cover":[],"content":"<h1 id=\"二、垃圾收集器与内存分配策略\"><a href=\"#二、垃圾收集器与内存分配策略\" class=\"headerlink\" title=\"二、垃圾收集器与内存分配策略\"></a>二、垃圾收集器与内存分配策略</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Jvm启动GC日志：<code>-Xloggc:/your/log/path/gc.log</code>，笔者测试使用的是JDK17，启动时会提示参数过时：<code>-Xloggc is deprecated. Will use -Xlog:gc:/your/log/path/gc.log instead.</code></p></blockquote>\n<h2 id=\"2-1-对象已死？\"><a href=\"#2-1-对象已死？\" class=\"headerlink\" title=\"2.1 对象已死？\"></a>2.1 对象已死？</h2><h3 id=\"2-1-1-引用计数算法\"><a href=\"#2-1-1-引用计数算法\" class=\"headerlink\" title=\"2.1.1 引用计数算法\"></a>2.1.1 引用计数算法</h3><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p>\n<p>在Java领域，主流的虚拟机没有选用引用计数算法来管理内存的，很难解决对象之间相互循环引用的问题。</p>\n<h3 id=\"2-1-2-可达性分析算法\"><a href=\"#2-1-2-可达性分析算法\" class=\"headerlink\" title=\"2.1.2 可达性分析算法\"></a>2.1.2 可达性分析算法</h3><p>当前主流的商用程序语言（Java、C#等）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。将“GC Roots”作为根对象，如果对象到根对象之间没有“引用链”（Reference Chain），也就是从GC Roots到对象不可达，则证明此对象不再被使用。</p>\n<img src=\"/post/java/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95.png\" class=\"\">\n\n<p>在Java技术体系里，固定可作为GC Roots的对象包括以下几种：</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）中引用的对象，比如：各个线程被调用方法堆栈中使用的参数、局部变量、临时变量等；</li>\n<li>在方法区中类静态属性引用的对象，比如Java类的引用类型静态变量；</li>\n<li>在方法区中常量引用的对象，比如字符串常量池（String Table）里的引用；</li>\n<li>在本地方法栈中JNI（Native方法）引用的对象；</li>\n<li>JVM内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（NPE，OOM）等，还有系统类加载器；</li>\n<li>所有被同步锁（synchronized 关键字）持有的对象；</li>\n<li>反应JVM内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><a href=\"https://blog.csdn.net/vincentff7zg/article/details/54582549\">JMXBean</a>；</li>\n<li><a href=\"https://www.jianshu.com/p/fc40ac81730c\">JVMTI简介</a>。</li>\n</ul></blockquote>\n<p>除了这些固定的集合外，根据用户使用的垃圾收集器和当前回收的内存区域不同，还有一些对象可以“临时”加入，比如分代收集和局部回收（Partial GC）要考虑到不同代或者其他区域时候存在对象的引用，需要把这些有关联的区域都一起加入到GC Roots集合中。</p>\n","feature":true,"text":"二、垃圾收集器与内存分配策略 Jvm启动GC日志：-Xloggc:/your/log/path/gc.log，笔者测试使用的是JDK17，启动时会提示参数过时：-Xloggc is deprecated. Will use -Xlog:gc:/your/log/path/gc.l...","link":"","photos":[],"count_time":{"symbolsCount":955,"symbolsTime":"1 mins."},"categories":[{"name":"jvm","slug":"jvm","count":1,"path":"api/categories/jvm.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"},{"name":"jvm","slug":"jvm","count":2,"path":"api/tags/jvm.json"},{"name":"笔记","slug":"笔记","count":2,"path":"api/tags/笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">二、垃圾收集器与内存分配策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F\"><span class=\"toc-text\">2.1 对象已死？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.1.1 引用计数算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-2-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.1.2 可达性分析算法</span></a></li></ol></li></ol></li></ol>","author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"深入理解java虚拟机（一）","uid":"15c9c1ab2fcef5aa3d42081d95493338","slug":"java/jvm/深入理解java虚拟机/深入理解java虚拟机（一）","date":"2022-05-13T02:54:44.000Z","updated":"2022-05-14T05:45:03.454Z","comments":true,"path":"api/articles/java/jvm/深入理解java虚拟机/深入理解java虚拟机（一）.json","keywords":null,"cover":[],"text":"一、Java 内存区域与内存溢出异常1.1 运行时数据区域java虚拟机在执行java程序的过程中会把它管理的内存划分为若干个不同的数据区域。这些区域各有各自的用途，以及创建时间和销毁时间，有的区域随着虚拟机的进程的启动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"},{"name":"jvm","slug":"jvm","count":2,"path":"api/tags/jvm.json"},{"name":"笔记","slug":"笔记","count":2,"path":"api/tags/笔记.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}