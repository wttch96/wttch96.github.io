{"title":"swiftUI多窗口","uid":"2fbfd2ddc5541e970a83e54c13dd8052","slug":"swift/swiftUI多窗口","date":"2023-09-05T08:34:01.000Z","updated":"2023-09-05T08:40:16.276Z","comments":true,"path":"api/articles/swift/swiftUI多窗口.json","keywords":null,"cover":null,"content":"<p>找了好久终于找到一个优雅的方式打开多个窗口。</p>\n<p>窗口声明，窗体id，传递的参数类型，后面闭包使用传递的参数生成窗体。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// A window group that displays messages.</span>\n<span class=\"token comment\">// 接收 Message 类型的窗口参数</span>\n<span class=\"token class-name\">WindowGroup</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"test\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> $messageID <span class=\"token keyword\">in</span>\n    <span class=\"token class-name\">MessageDetail</span><span class=\"token punctuation\">(</span>messageID<span class=\"token punctuation\">:</span> messageID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>打开窗口并传递参数，使用 Environment 获取 openWindow，使用 id 和具体的消息对象即可。</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span>\n<span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>openWindow<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> openWindow\n\n<span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Open message\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">openWindow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"test\"</span></span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"找了好久终于找到一个优雅的方式打开多个窗口。 窗口声明，窗体id，传递的参数类型，后面闭包使用传递的参数生成窗体。 // A window group that displays messages. // 接收 Message 类型的窗口参数 WindowGroup(id: \"t...","link":"","photos":[],"count_time":{"symbolsCount":491,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"深入理解java虚拟机（二）","uid":"91e0a4a93e4ee6f9ef1f4f9607c79a1f","slug":"java/jvm/深入理解java虚拟机/深入理解java虚拟机（二）","date":"2022-05-13T13:09:44.000Z","updated":"2022-05-14T12:22:12.798Z","comments":true,"path":"api/articles/java/jvm/深入理解java虚拟机/深入理解java虚拟机（二）.json","keywords":null,"cover":[],"text":"二、垃圾收集器与内存分配策略 Jvm启动GC日志：-Xloggc:/your/log/path/gc.log，笔者测试使用的是JDK17，启动时会提示参数过时：-Xloggc is deprecated. Will use -Xlog:gc:/your/log/path/gc.l...","link":"","photos":[],"count_time":{"symbolsCount":955,"symbolsTime":"1 mins."},"categories":[{"name":"jvm","slug":"jvm","count":1,"path":"api/categories/jvm.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"},{"name":"jvm","slug":"jvm","count":2,"path":"api/tags/jvm.json"},{"name":"笔记","slug":"笔记","count":2,"path":"api/tags/笔记.json"}],"author":{"name":"Wttch","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Always trust your spirit.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}